generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  category_id       Int             @id @default(autoincrement())
  category          String?         @db.VarChar(45)
  category_location Int
  products          products[]
  subcategories     subcategories[]
}

model clothing_size {
  clothing_size_id   Int                  @id @default(autoincrement())
  clothing_size      String?              @db.VarChar(45)
  product_order_xref product_order_xref[]
}

model orders {
  order_id           Int                  @id @default(autoincrement())
  order_date         DateTime?            @db.Date
  user_id            Int?
  user               user?                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_user")
  product_order_xref product_order_xref[]

  @@index([user_id], map: "fk_order_user_idx")
}

model product_order_xref {
  product_id       Int
  order_id         Int
  quantity         Int?
  clothing_size_id Int?
  clothing_size    clothing_size? @relation(fields: [clothing_size_id], references: [clothing_size_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productorder_clothingsize")
  orders           orders         @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productorder_order")
  products         products       @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_productorder_product")

  @@id([product_id, order_id])
  @@index([clothing_size_id], map: "fk_productorder_clothingsize_idx")
  @@index([order_id], map: "fk_productorder_order_idx")
}

model products {
  product_id          Int                   @id @default(autoincrement())
  product_name        String                @db.VarChar(45)
  category_id         Int
  clothing_size_id    Int?
  quantity_left       Int?
  subcategory_id      Int?
  image_products_xref image_products_xref[]
  product_order_xref  product_order_xref[]
  category            category              @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_category")
  subcategories       subcategories?        @relation(fields: [subcategory_id], references: [subcategory_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_subcategory")

  @@index([category_id], map: "fk_product_category_idx")
  @@index([subcategory_id], map: "fk_product_subcategory_idx")
}

model user {
  user_id      Int      @id @default(autoincrement())
  first_name   String   @db.VarChar(45)
  last_name    String   @db.VarChar(45)
  company_name String   @db.VarChar(45)
  orders       orders[]
}

model subcategories {
  subcategory_id   Int        @id
  subcategory_name String     @db.VarChar(135)
  catg_id          Int
  products         products[]
  category         category   @relation(fields: [catg_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "category_id_connection")

  @@index([catg_id], map: "category_id_connection_idx")
}

model image_products_xref {
  img_id     Int
  product_id Int
  images     images   @relation(fields: [img_id], references: [img_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_imageproducts_image")
  products   products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_imageproducts_products")

  @@id([img_id, product_id])
  @@index([product_id], map: "fk_imageproducts_product_idx")
}

model images {
  img_id              Int                   @id
  img                 Bytes?                @db.Blob
  image_products_xref image_products_xref[]
}
